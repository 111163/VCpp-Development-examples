
// 绘制渐变颜色的空心字Dlg.cpp : 实现文件
//

#include "stdafx.h"
#include "绘制渐变颜色的空心字.h"
#include "绘制渐变颜色的空心字Dlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// C绘制渐变颜色的空心字Dlg 对话框




C绘制渐变颜色的空心字Dlg::C绘制渐变颜色的空心字Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(C绘制渐变颜色的空心字Dlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void C绘制渐变颜色的空心字Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(C绘制渐变颜色的空心字Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
END_MESSAGE_MAP()


// C绘制渐变颜色的空心字Dlg 消息处理程序

BOOL C绘制渐变颜色的空心字Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void C绘制渐变颜色的空心字Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void C绘制渐变颜色的空心字Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDC *pDC = GetDC();
		CRect rect;
		GetWindowRect(&rect);
		CFont font;
		font.CreatePointFont(900, "宋体");
		CFont *oldFont = pDC->SelectObject(&font);
		pDC->SetBkMode(TRANSPARENT);
		CPen pen(PS_SOLID, 1, RGB(0, 128, 255));
		CPen *oldPne = pDC->SelectObject(&pen);
		pDC->BeginPath();
			pDC->TextOut(10, 10,"张亮你好！");
		pDC->EndPath();
		pDC->SelectClipPath(RGN_AND);// 路径里的的就是字填充  //RGN_DIFF---路径外的矩形区域
		// 该函数选择当前的路径作为设备环境的一个剪切区域。通过使用特定的模式把新的区域与任何存在的剪切区域合并。							
		//  定义使用路径的方法，具取值如下：
		//	RGN_AND：新的剪切区包括当前剪切区域与当前路径的一个交集（重叠区域）。
		//	RGN_COPY：新的剪切区域就是当前的路径。
		//	RGN_DIFF：新的剪切区域包含除了当前路径外的当前剪切区域。
		//	RGN_OR：新的剪切区域包含当前剪切区域与当前路径的并集。
		//	RGN_XOR：新的剪切区域包含当前剪切区域与当前路径的并集但不包含重叠的区域。
		CBrush br,*oldbr;
		oldbr=pDC->SelectObject(&br);
		for(int m=255;m>0;m--) 
		{
			int r=(600*m)/255;
			br.DeleteObject();
			br.CreateSolidBrush(RGB(255,m,128));              //创建画刷
			pDC->FillRect(CRect(0,0,r,300),&br);         //填充矩形  从右往左
			CString tmp;
			//tmp.Format("%d ", r);
			//TRACE(tmp);
		}
		pDC->SelectObject(oldbr);
		pDC->SelectObject(oldFont);
		font.DeleteObject();
		pDC->SelectObject(oldPne);
		font.DeleteObject();
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR C绘制渐变颜色的空心字Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

