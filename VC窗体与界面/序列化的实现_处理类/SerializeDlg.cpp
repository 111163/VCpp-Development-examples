
// SerializeDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "Serialize.h"
#include "SerializeDlg.h"
#include "afxdialogex.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CSerializeDlg 对话框




CSerializeDlg::CSerializeDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CSerializeDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CSerializeDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CSerializeDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_WRITE, &CSerializeDlg::OnBnClickedWrite)
	ON_BN_CLICKED(IDCREAD, &CSerializeDlg::OnBnClickedCread)
END_MESSAGE_MAP()


// CSerializeDlg 消息处理程序

BOOL CSerializeDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CSerializeDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CSerializeDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CSerializeDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CSerializeDlg::OnBnClickedWrite()
{
	CSerialClass* serial = new CSerialClass;    // 为什么要这么做呢？因为传递的是类指针，为什么传递类指针呢？因为为了避免拷贝带来的性能损失
	serial->m_Data = 2008;
	serial->m_Text = "世界你好！";
	CFile m_file;
	m_file.Open("SerialcClass.dat", CFile::modeCreate|CFile::modeWrite);
	CArchive ar(&m_file, CArchive::store);
	/*
	serial.Serialize(ar);  // 如果是对象的话，就这样使用，注意是对象，不是对象指针   实际上这里是主动进行  --例如文档，它本身就是主动控制序列化的所以我们可以在MFC关于文档的源码中看到这样的写法
	*/
	/*ar.Write(&serial, sizeof(serial));*/
	ar << serial;		  // 实际上这里是被动进行
	delete serial;
	serial = nullptr;
	ar.Close();
	m_file.Close();
}


void CSerializeDlg::OnBnClickedCread()
{
	// TODO: 在此添加控件通知处理程序代码
	CSerialClass* serial = nullptr;     // 这里是因为反序列化会动态的创建对象并返回，所以需要一个类指针
	CFile m_file;
	m_file.Open("SerialcClass.dat", CFile::modeRead);
	CArchive ar(&m_file, CArchive::load);
	/*
	serial.Serialize(ar);  // 如果是对象的话，就这样使用，注意是对象，不是对象指针 实际上这里是主动进行  --例如文档，它本身就是主动控制序列化的所以我们可以在MFC关于文档的源码中看到这样的写法
	*/
	ar >> serial;    // 实际上这里是被动进行 注意这里返回的是一个动态创建的对象的指针，所以要传递指针
	CString tmp;
	tmp.Format("%d_%s", serial->m_Data, serial->m_Text);
	AfxMessageBox(tmp);
	delete serial;
	serial = nullptr;
	ar.Close();
	m_file.Close();
}
